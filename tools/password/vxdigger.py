#!/usr/bin/env python3
"""
This script scans a memory dump or firmware image for any password hashes that
happen to match the "master password" list generated by vxmaster. This is a
simple way to determine whether a device has a hardcoded password.

(C) 2010 Rapid7
"""

import os
import sys


def usage():
    """Display usage information"""
    print(f"usage: {sys.argv[0]} [dump-file] <master password list>", file=sys.stderr)
    sys.exit(1)


def main():
    if len(sys.argv) < 2:
        usage()
    
    dump = sys.argv[1]
    
    if len(sys.argv) > 2:
        list_file = sys.argv[2]
    else:
        # Default path
        script_dir = os.path.dirname(os.path.abspath(__file__))
        list_file = os.path.join(script_dir, "..", "data", "wordlists", "vxworks_collide_20.txt")
    
    print("[*] Loading master password list...", file=sys.stderr)
    ohashes = []
    
    try:
        with open(list_file, 'r', encoding='latin-1') as f:
            for line in f:
                parts = line.strip().split("|", 2)
                if len(parts) >= 3:
                    xid = int(parts[0])
                    enc = parts[1]
                    raw = parts[2]
                    
                    if 'invalid' not in raw:
                        # Split on null byte if present
                        raw = raw.split('\x00')[0]
                        ohashes.append([xid, enc, raw])
    except IOError as e:
        print(f"[-] Error reading password list: {e}", file=sys.stderr)
        sys.exit(1)
    
    print("[*] Loading memory dump...", file=sys.stderr)
    try:
        with open(dump, 'rb') as f:
            data = f.read()
    except IOError as e:
        print(f"[-] Error reading dump file: {e}", file=sys.stderr)
        sys.exit(1)
    
    print("[*] Digging through memory dump...", file=sys.stderr)
    
    hashes = ohashes
    tot = len(hashes)
    
    for cur, r in enumerate(hashes, 1):
        x, k, h = r
        
        pct = int((cur / tot) * 100)
        sys.stdout.write(f"\r                                      \r[*] Progress: {pct}% ({cur}/{tot})")
        sys.stdout.flush()
        
        # Check if hash exists in data
        k_bytes = k.encode('latin-1')
        if k_bytes not in data:
            continue
        
        sys.stdout.write("\n")
        sys.stdout.flush()
        
        # Convert to hex escape format
        hex_repr = ''.join([f"\\x{b:02x}" for b in h.encode('latin-1')])
        
        print("[+]")
        print(f"[+] Password hash '{k}' (#{x}) can be accessed with {hex_repr} [ '{h}' ]")
        print("[+]")
    
    print()  # Final newline


if __name__ == "__main__":
    main()
